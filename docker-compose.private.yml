services:
  web:
    build: .
    container_name: django_gunicorn_private
    restart: unless-stopped
    volumes:
      - static_volume:/app/static
      - ${HOST_STORAGE_PATH}/main_storage:/app/main_storage
      - ${HOST_STORAGE_PATH}/sequestered_incoming:/app/sequestered_incoming
    expose:
      - 8000
    env_file:
      - .env
    environment:
      - SERVER_ROLE=private
      - PUBLIC_SERVER_URL=${PUBLIC_SERVER_URL}
      - REDIS_URL=redis://redis:6379/0
      - PUBLIC_REDIS_URL=${PUBLIC_REDIS_URL}
      - DOCKER_CONTAINER=true
    depends_on:
      - db

  db:
    image: postgres
    container_name: postgres_django_private
    restart: unless-stopped
    ports:
      - "54322:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./backup:/backup
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 6

  redis:
    image: redis:7
    container_name: redis_private
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  celery-worker:
    build: .
    container_name: celery_worker_private
    restart: unless-stopped
    command: celery -A archive worker -Q private,common
    volumes:
      - ${HOST_STORAGE_PATH}/main_storage:/app/main_storage
      - ${HOST_STORAGE_PATH}/sequestered_incoming:/app/sequestered_incoming
    env_file:
      - .env
    environment:
      - SERVER_ROLE=private
      - PUBLIC_SERVER_URL=${PUBLIC_SERVER_URL}
      - REDIS_URL=${PUBLIC_REDIS_URL}
      - DOCKER_CONTAINER=true
    depends_on:
      - db
      - redis

  celery-beat:
    build: .
    container_name: celery_beat_private
    restart: unless-stopped
    command: celery -A archive beat
    volumes:
      - ${HOST_STORAGE_PATH}/main_storage:/app/main_storage
    env_file:
      - .env
    environment:
      - SERVER_ROLE=private
      - PUBLIC_SERVER_URL=${PUBLIC_SERVER_URL}
      - REDIS_URL=${PUBLIC_REDIS_URL}
      - DOCKER_CONTAINER=true
    depends_on:
      - db
      - redis

# Commented out until implementation is ready
#  virus-scanner:
#    build: ./virus-scanner
#    container_name: virus_scanner_private
#    restart: unless-stopped
#    volumes:
#      - sequestered_incoming:/scan/incoming:ro
#      - main_storage:/scan/main:rw
#    environment:
#      - SERVER_ROLE=private
#      - SCAN_INTERVAL=300  # Scan every 5 minutes

# Commented out until implementation is ready
#  sync-service:
#    build: ./sync-service
#    container_name: sync_service_private
#    restart: unless-stopped
#    volumes:
#      - main_storage:/data/main:ro
#    environment:
#      - SERVER_ROLE=private
#      - PUBLIC_SERVER_URL=${PUBLIC_SERVER_URL}
#      - SYNC_INTERVAL=3600  # Sync every hour

  nginx:
    build: ./nginx
    container_name: nginx_private
    restart: unless-stopped
    volumes:
      - static_volume:/app/static/
    ports:
      - "8081:8081"  # Expose port for NPM to access
    depends_on:
      - web

volumes:
  postgres_data:
  static_volume:
  redis_data:
  # main_storage and sequestered_incoming are host-mounted

# Remove external network dependency for TrueNAS Scale
# NPM installed via Apps UI will access via host network 